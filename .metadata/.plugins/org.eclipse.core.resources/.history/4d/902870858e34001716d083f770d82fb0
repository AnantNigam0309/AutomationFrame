package apiary;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPatch;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import Engine.testNGTestRunnerCampaign;
import exceptionsDefined.FirebaseException;
import exceptionsDefined.JacksonUtilityException;
import generics.constant;
import utils.jsonHelper;

public class Firebase {

	private final String baseUrl;
	private String secureToken = null;
	private List<NameValuePair> query = null;
	
	
	public Firebase( String baseUrl ) throws FirebaseException {
		constant.log=Logger.getLogger(testNGTestRunnerCampaign.class.getSimpleName().toString());
		
		if( baseUrl == null || baseUrl.trim().isEmpty() ) {
			String msg = "baseUrl cannot be null or empty; was: '" + baseUrl + "'";
			constant.log.warning( msg );
			throw new FirebaseException( msg );
		}
		this.baseUrl = baseUrl.trim();
		query = new ArrayList<NameValuePair>();
		constant.log.info( "intialized with base-url: " + this.baseUrl );
	}
	
	public Firebase(String baseUrl, String secureToken) throws FirebaseException {
		if( baseUrl == null || baseUrl.trim().isEmpty() ) {
			String msg = "baseUrl cannot be null or empty; was: '" + baseUrl + "'";
			constant.log.warning( msg );
			throw new FirebaseException( msg );
		}
		this.secureToken = secureToken;
		this.baseUrl = baseUrl.trim();
		query = new ArrayList<NameValuePair>();
		constant.log.info( "intialized with base-url: " + this.baseUrl );
	}

	public FirebaseResponse get() throws FirebaseException, UnsupportedEncodingException {
		return this.get( null );
	}
	
	public FirebaseResponse get( String path ) throws FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpGet request = new HttpGet( url );
		HttpResponse httpResponse = this.makeRequest( request );
		
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.GET, httpResponse );
		
		return response;
	}
	
	public FirebaseResponse patch(Map<String, Object> data) throws FirebaseException, JacksonUtilityException, UnsupportedEncodingException {
		return this.patch(null, data);
	}
	
	public FirebaseResponse patch(String path, Map<String, Object> data) throws FirebaseException, JacksonUtilityException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPatch request = new HttpPatch(url);
		request.setEntity( this.buildEntityFromDataMap( data ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.PATCH, httpResponse );
				
		return response;
	}
	
	public FirebaseResponse patch(String jsonData) throws UnsupportedEncodingException, FirebaseException {
		return this.patch(null, jsonData);
	}
	
	public FirebaseResponse patch(String path, String jsonData) throws UnsupportedEncodingException, FirebaseException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPatch request = new HttpPatch( url );
		request.setEntity( this.buildEntityFromJsonData( jsonData ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.PATCH, httpResponse );
				
		return response;		
	}
	
	public FirebaseResponse put( Map<String, Object> data ) throws JacksonUtilityException, FirebaseException, UnsupportedEncodingException {
		return this.put( null, data );
	}
	
	public FirebaseResponse put( String path, Map<String, Object> data ) throws JacksonUtilityException, FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPut request = new HttpPut( url );
		request.setEntity( this.buildEntityFromDataMap( data ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.PUT, httpResponse );
		
		return response;
	}
	
	public FirebaseResponse put( String jsonData ) throws FirebaseException, UnsupportedEncodingException {
		return this.put( null, jsonData );
	}

	public FirebaseResponse put( String path, String jsonData ) throws FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPut request = new HttpPut( url );
		request.setEntity( this.buildEntityFromJsonData( jsonData ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.PUT, httpResponse );
		
		return response;		
	}
	
	public FirebaseResponse post( Map<String, Object> data ) throws JacksonUtilityException, FirebaseException, UnsupportedEncodingException {
		return this.post( null, data );
	}
	
	public FirebaseResponse post( String path, Map<String, Object> data ) throws JacksonUtilityException, FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPost request = new HttpPost( url );
		request.setEntity( this.buildEntityFromDataMap( data ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.POST, httpResponse );
		
		return response;
	}
	
	public FirebaseResponse post( String jsonData ) throws FirebaseException, UnsupportedEncodingException {
		return this.post( null, jsonData );
	}
	
	public FirebaseResponse post( String path, String jsonData ) throws FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpPost request = new HttpPost( url );
		request.setEntity( this.buildEntityFromJsonData( jsonData ) );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.POST, httpResponse );
		
		return response;
	}
	
	public Firebase addQuery(String query, String parameter) {
		this.query.add(new BasicNameValuePair(query, parameter));
		return this;
	}
	
	public FirebaseResponse delete() throws FirebaseException, UnsupportedEncodingException {
		return this.delete( null );
	}

	public FirebaseResponse delete( String path ) throws FirebaseException, UnsupportedEncodingException {
		String url = this.buildFullUrlFromRelativePath( path );
		HttpDelete request = new HttpDelete( url );
		HttpResponse httpResponse = this.makeRequest( request );
		FirebaseResponse response = this.processResponse( FirebaseRestMethod.DELETE, httpResponse );
		
		return response;
	}
	
	private StringEntity buildEntityFromDataMap( Map<String, Object> dataMap ) throws FirebaseException, JacksonUtilityException {
		
		String jsonData = constant.jsonHelp.GET_JSON_STRING_FROM_MAP( dataMap );
		return this.buildEntityFromJsonData( jsonData );
	}
	
	private StringEntity buildEntityFromJsonData( String jsonData ) throws FirebaseException {

		StringEntity result = null;
		try {
			
			result = new StringEntity( jsonData );
			
		} catch( Throwable t ) {
			
			String msg = "unable to create entity from data; data was: " + jsonData;
			constant.log.warning( msg );
			throw new FirebaseException( msg, t );
			
		}
		
		return result;
	}
	
	private String buildFullUrlFromRelativePath( String path ) throws UnsupportedEncodingException {
		if( path == null ) {
			path = "";
		}
		path = path.trim();
		if( !path.isEmpty() && !path.startsWith( "/" ) ) {
			path = "/" + path;
		}
		String url = this.baseUrl + path ;
		
		if(query != null) {
			url += "?";
			Iterator<NameValuePair> it = query.iterator();
			NameValuePair e;
			while(it.hasNext()) {
				e = it.next();
				url += e.getName() + "=" + URLEncoder.encode(e.getValue(), "UTF-8") + "&";
			}
		}
		
		if(secureToken != null) {
			if(query != null) {
				url += "auth=" + secureToken;
			} else {
				url += "?auth=" + secureToken;
			}
		}
		
		if(url.lastIndexOf("&") == url.length()) {
			StringBuilder str = new StringBuilder(url);
			str.deleteCharAt(str.length());
			url = str.toString();
		}
		
		constant.log.info( "built full url to '" + url + "' using relative-path of '" + path + "'" );
		
		return url;
	}
	
	
	@SuppressWarnings("resource")
	private HttpResponse makeRequest( HttpRequestBase request ) throws FirebaseException {
		
		HttpResponse response = null;
		if( request == null ) {
			
			String msg = "request cannot be null";
			constant.log.warning( msg );
			throw new FirebaseException( msg );
		}
		
		request.setHeader("content-type","Application/json");
		request.setHeader("Accept","Application/json");
		
		try {
			
			HttpClient client = new DefaultHttpClient();
			response = client.execute( request );
			
		} catch( Throwable t ) {
		
			String msg = "unable to receive response from request(" + request.getMethod() +  ") @ " + request.getURI();
			constant.log.warning( msg );
			throw new FirebaseException( msg, t );
			
		}
			
		return response;
	}
	
	private FirebaseResponse processResponse( FirebaseRestMethod method, HttpResponse httpResponse ) throws FirebaseException {
	
		FirebaseResponse response = null;
		if( method == null ) {
			
			String msg = "method cannot be null";
			constant.log.warning( msg );
			throw new FirebaseException( msg );
		}
		if( httpResponse == null ) {
			
			String msg = "httpResponse cannot be null";
			constant.log.warning( msg );
			throw new FirebaseException( msg );
		}
		HttpEntity entity = httpResponse.getEntity();
		int code = httpResponse.getStatusLine().getStatusCode();
		boolean success = false;
		switch( method ) {
			case DELETE:
				if( httpResponse.getStatusLine().getStatusCode() == 204
					&& "No Content".equalsIgnoreCase( httpResponse.getStatusLine().getReasonPhrase() ) )
				{
					success = true;
				}
				break;
			case PATCH:
			case PUT:
			case POST:
			case GET:
				if( httpResponse.getStatusLine().getStatusCode() == 200
					&& "OK".equalsIgnoreCase( httpResponse.getStatusLine().getReasonPhrase() ) )
				{
					success = true;
				}
				break;
			default:
				break;
				
		}
		
		Writer writer = new StringWriter();
		if( entity != null ) {
			
			try {
				
				InputStream is = entity.getContent();
				char[] buffer = new char[1024];
				Reader reader = new BufferedReader( new InputStreamReader( is, "UTF-8" ) );
				int n;
				while( (n=reader.read(buffer)) != -1 ) {
					writer.write( buffer, 0, n );
				}
				
			} catch( Throwable t ) {
				
				String msg = "unable to read response-content; read up to this point: '" + writer.toString() + "'";
				writer = new StringWriter(); // don't want to later give jackson partial JSON it might choke on
				constant.log.warning( msg );
				throw new FirebaseException( msg, t );
				
			}
		}
		
		Map<String, Object> body = null;
		try {
			
			body = jsonHelper.GET_JSON_STRING_AS_MAP( writer.toString() );
			
		} catch( JacksonUtilityException jue ) {
			
			String msg = "unable to convert response-body into map; response-body was: '" + writer.toString() + "'";
			constant.log.warning( msg );
			throw new FirebaseException( msg, jue );
		}
		
		// build the response
		response = new FirebaseResponse( success, code, body, writer.toString() );
		
		//clear the query
		query = null;
		
		return response;
	}
	
	public enum FirebaseRestMethod {
		
		GET,
		PATCH,
		PUT,
		POST,
		DELETE;
	}
}
